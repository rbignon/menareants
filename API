                   *******************
                   *   Men Are Ants  *
                   *******************
                         [ API ]

Dernière modification:
$Id$

Sommaire:
1) Principe du jeu
2) Protocole
3) Particularités des commandes de positions
4) Modes
5) PLS
6) Etat d'une partie
7) Intelligence Artificielle

1) Principe du jeu


2) Protocole
      a) Client -> Server
         - Général
              IAM <nick> <prog> <version>       :je me présente
              LSP                               :lister les parties
              CRE <nom>                         :créé une partie
              JOI <nom> [$]                     :joindre une partie ('$' signifie "créer le chan")
              STAT                              :request stats
              BYE                               :au revoir
         - Dans une pré-partie
              SET <mode(s)> [params]            :met un paramètre (voir section 4. Modes)
              JIA <nom>                         :Créé une IA (par l'owner)
              KIK <nick> [raison]               :l'owner peut kicker
              LEA                               :partir
              GO!                               :l'owner lance le jeu
              MSG <message>                     :envoie un message à tous les joueurs
              AMSG <message>                    :envoie un message à ses alliés
         - En cours de jeu
              ARM <nom> [+<nb>] [%<type>]       :modifier le status d'une armée
                  [/<nb>] [>] [^] [v] [<] [*<pos>]

      b) Serveur -> Client
         - Général
              HEL <prog> <version>              :welcome
              AIM <nick>                        :confirmation du IAM
              MOTD  <ligne>                     :motd
              EOM                               :fin du motd
              STAT <nbactco> <nbco> <nbch>      :stats sur le serveur
                   <chinwait> <chingame> <chtot> <uptime>
              LSP <nom> <+/-> <nbjoueurs>       :liste une partie
                  <nbmax> [map]
              EOL                               :fin de la liste
              MAJ <+|->                         :le client (ou le serveur) n'est pas à jour
              BYE [raison]                      :au revoir
              USED                              :pseudo déjà utilisé
         - Dans une pré-partie
              ER1                               :ne peut pas joindre
              ER2 <nick>                        :le pseudo de l'IA a déjà été pris
              PLS <params> [...]                :liste des joueurs (voir 5. PLS)
              LSM <nom> <nbmin> <nbmax> <infos> :envoie la liste des cartes
              EOMAP                             :fin de la liste des maps
              :<nick> JOI <nom> <sets>          :un user join
              :<nick> SET <mode(s)> <value>     :un user met un paramètre (voir section 4. Modes)
              :<nick> LEA                       :un user part (ou a été kické)
              :<nick> MSG <message>             :message reçue
              SMAP <map>                        :envoie la map
              EOSMAP                            :fin du SMAP
         - En cours de jeu
              INFO <msg>                        :message envoyé par le serveur qui s'affiche à l'écran des joueurs
              :<nick>!<arm> ARM [+<nb>] [*<pos>]:montre le changement d'une armée
                          [%<type>] [<] [-] [.]
                          [=<arm>,<pos>,<movs>]

3) Particularités des commandes de positions
      Voici les arguments server -> client :
         +<nb>       :ajoute des unités (donne le nombre final)
         %<type>     :définit le type de l'armée
         =<O!E>,<x>, :change la position (on indique l'user dans le cas d'un * qui prendrait plusieurs senders)
          <y>,<[>][v][<][^]>
         *<pos>      :attaque
         <           :retour
         -           :suppression de l'armée
         .           :lock
         {           :deploiement
         }           :reployé
      Et client -> server :
         >           :déplacement de un à droite
         v           :déplacement de un vers le bas
         <           :déplacement de un à gauche
         ^           :déplacement de un vers le haut
         *<pos>      :attaque une position
         +           :création d'une entité
         =<pos>      : |- position de départ
         %<type>     : `- définit le type
         #           :deploiement.
         !           :lors d'une attaque, force la case

4) Modes
      La commande SET nécessite l'utilisation de modes, semblables à l'IRC.
      Voici la liste :
        Mode pour le chan:
         +l <limite>         :paramètre la limite (serveur -> user uniquement)
         +o <user>           :met op un user
         +m <map>            :définie la map du jeu
         +W                  :pré-partie (WAITING)
         +S                  :envoie des infos (SENDING)
         +P                  :jeu (PLAYING)
         +A                  :animation (ANIMING)
        Mode pour un user:
         +c <couleur>        :l'user se définie sa couleur
         +p <position>       :l'user définie sa position
         +n <nation>         :l'user définie sa nation
         +!                  :le joueur est READY
         +$                  :l'argent du joueur (serveur -> user uniquement)
         +@ <country>        :l'user possède maintenant la terre <country>
         +a <nick>           :définie un user comme allié de lui

5) PLS
     La commande PLS a la particularité d'avoir une syntaxe plutot complexe et pas compréhensible
     sans document. C'est pourquoi je consacre ce cours paragraphe dans l'unique but de la détailler:

     PLS [@][!]<position>,<couleur>,<nation>,<pseudo> [...]
     [*]               :le joueur est owner
     [@]               :le joueur est op
     [!]               :le joueur est pret (Ready)
     <position>        :la position du joueur sur la carte
     <couleur>         :la couleur
     <nation>          :la nation
     <pseudo>          :le pseudo du joueur

6) Êtat d'une partie
     WAITING           :c'est la pré-partie
     SENDING           :le client créé la map physiquement et prépare toutes les données
     PLAYING           :les joueurs doivent jouer jusqu'à ce que tout le monde soit READY
     ANIMING           :animations commandées par le serveur

7) Intelligence Artificielle
     L'intelligence artificielle est implémentée dans le serveur de la manière suivante :
     - Son pseudo commence, pour la distinction, par IA_CHAR, définie dans lib/Channels.h, par default '*', étant un
       caractère non inclus dans NICK_CHARS.
     - Elle est considérée comme un client normal par le serveur qui ne fait quasiment pas la distinciton
     - Chaque sendrpl() vers ce client est interprété ensuite par l'IA qui parse le message et le traite.
     - Chaque message que l'IA veut envoyer est en fait redirigé vers son parsemsg().

     La problematique est la suivante:
     * Dans plusieurs fonctions ???Command::Exec() executées par une commande d'un client, il y a des messages envoyés aux
       joueurs en prenant en compte le fait qu'aucun traitement d'un éventuel message de retour ne sera effectué avant
       la fin de cette fonction. Le problème est que l'IA elle, lorsqu'elle reçoit le message qui a été envoyé
       avant la fin de la fonction en question, peut interagire et répondre tout de suite, ce qui entraine un autre
       traitement qui coupe le traitement en cours.
     * Pour remédier à ce problème, un système de "lock" a été trouvé du coté de l'IA. Ainsi, lorsqu'elle est positionée
       comme étant "locké", tous les messages reçus sont ajoutés dans une queue qui, une fois "delocké", sera traité
       d'un coup.