Index: Batiments.cpp
===================================================================
--- Batiments.cpp	(révision 808)
+++ Batiments.cpp	(copie de travail)
@@ -218,38 +218,50 @@
 	if(!cible) return;
 
 	// Trajectoire d'un missile
-	int ax = Case()->Image()->X() + 36;
-	int ay = Case()->Image()->Y() + 2; // Coordonn�s du point de d�art
-	int bx = cible->Image()->X() + CASE_WIDTH/2;
-	int by = cible->Image()->Y() + CASE_HEIGHT/3; // Coordonn�s du point d'arriv�-	int tx; // Point de passage le plus haut du missile
-	int ty; // (l�o il commence �retomber)
+	float ax = Case()->Image()->X() + 36;
+	float ay = Case()->Image()->Y() + 2; // Coordonn�s du point de d�art
+	float bx = cible->Image()->X() + CASE_WIDTH/2;
+	float by = cible->Image()->Y() + CASE_HEIGHT/3; // Coordonn�s du point d'arriv�	int tx; // Point de passage le plus haut du missile
+	int ty; // (l�o il commence �retomber)
 
-	tx = (ax + bx) / 2;
+	int tx = (int)((ax + bx) / 2);
 	ty = 0;
 
-	if( ax == bx ) bx++; // Evite une division par 0
-
-	// Calcule des coeffs de l'�uation
-	float A, B, C;
-	A = (ay - by) / float(ax*ax - bx*bx - 2*tx*ax + 2*tx*bx);
-	B = - 2 * A * tx;
-	C = ax - A*ax*ax + B*ax;
-
 	if(!miss)
 	{
 		miss = SDL_GetTicks();
-		printf("begin, %d,%d -> %d,%d\n", ax, ay, bx, by);
+		printf("begin, %d;%d -> %d;%d\n", ax, ay, bx, by);
 	}
 
-	// Position du missile :
-	const unsigned int duration = 2000; // Dur� du mouvement du missile
+	const unsigned int duration = 2000; // Dur� du mouvement du missile
 	unsigned int t = SDL_GetTicks(); // Temps actuel en millisecondes
 	unsigned int t0 = miss; // Temps au moement du lancement du missile
 
+	if( ax == tx ) tx++; // Evite une division par 0
+	if( tx == bx ) bx++; // Evite une division par 0
+
+	float x = ((bx - ax) * (t - t0) / (float)duration) + (float)ax;
+
+	// Calcule des coeffs de l'�uation
+	float A, B, C;
+
+	if(x < (float)tx)
+	{
+		A = (ay - ty) / float((ax - tx)*(ax - tx));
+		B = - 2 * A * tx;
+		C = ay - A*ax*ax - B*ax;
+	}
+	else
+	{
+		A = (by - ty) / float((bx - tx)*(bx - tx));
+		B = - 2 * A * tx;
+		C = by - A*bx*bx - B*bx;
+	}
+
+	// Position du missile :
+
 	if( t - t0 < duration)
 	{
-		float x = ((bx - ax) * (t - t0) / (float)duration) + (float)ax;
 		float y = A*x*x + B*x + C;
 
 		Map()->ShowMap()->ToRedraw((int)x, (int)y);
